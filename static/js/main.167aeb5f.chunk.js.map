{"version":3,"sources":["img/anakin_img.jpg","img/rey_img.jpg","img/luke_img.jpg","img/leia_img.jpg","img/rey_avatar.jpg","img/rey_img_2.jpg","img/rey_img_3.jpg","img/palpatine.jpg","post/createStyled.js","posts/skeleton.js","post/create.js","reducers/reducer.js","store/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","CreateContainer","Styled","div","CreateForm","CreateFormLabel","label","CreateFormSelect","select","CreateFormInput","input","CreateButton","button","Skeleton","props","className","src","photo","alt","name","nickname","date","content","image","time","Date","getDate","getMonth","Create","state","photos","existAccount","names","nicknames","dates","contents","images","changeText","event","setState","target","value","urlImages","setTwit","twit","filter","addNewPost","onChange","this","selected","map","type","placeholder","onClick","skeleton","Component","connect","dispatch","newPost","initialStore","anakin","rey","luke","rey_2","leia","rey_3","rey_avatar","palpatine","reducer","store","action","createStore","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.167aeb5f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/anakin_img.18867fcd.jpg\";","module.exports = __webpack_public_path__ + \"static/media/rey_img.50847147.jpg\";","module.exports = __webpack_public_path__ + \"static/media/luke_img.55da1bf0.jpg\";","module.exports = __webpack_public_path__ + \"static/media/leia_img.3352fdeb.jpg\";","module.exports = __webpack_public_path__ + \"static/media/rey_avatar.22de823b.jpg\";","module.exports = __webpack_public_path__ + \"static/media/rey_img_2.71852408.jpg\";","module.exports = __webpack_public_path__ + \"static/media/rey_img_3.28584aa0.jpg\";","module.exports = __webpack_public_path__ + \"static/media/palpatine.40b50c9e.jpg\";","import Styled from \"styled-components\";\r\n\r\nconst CreateContainer = Styled.div`\r\n    margin: auto auto;\r\n    color: white;\r\n    display: flex;\r\n    align-items: center;\r\n    flex-direction: column;\r\n`\r\n\r\nconst CreateForm = Styled.div`\r\n    margin: 0.5% auto;\r\n`\r\n\r\nconst CreateFormLabel = Styled.label`\r\n    margin: 15px\r\n`\r\n\r\nconst CreateFormSelect = Styled.select`\r\n    padding: 2px 2px;\r\n    width: 240px;\r\n    height: 20px;\r\n`\r\n\r\nconst CreateFormInput = Styled.input`\r\n    height: 20px;\r\n    width: 160px;\r\n    border-radius: 5px;\r\n`\r\n\r\nconst CreateButton = Styled.button`\r\n    margin: 10px;\r\n    width: 320px;\r\n    height: 40px;\r\n    text-align: center;\r\n    background-color: rgba(89, 171, 227, 1);\r\n    border-radius: 5px;\r\n    &:hover {\r\n        background-color: rgba(103, 65, 114, 0.9);\r\n    }\r\n`\r\n\r\nexport {CreateContainer, CreateForm, CreateFormLabel, CreateFormSelect, CreateFormInput, CreateButton};","import React from 'react';\r\nimport './skeleton.css';\r\n//import {ReactComponent as ReactLogo} from '../img/padlock.svg';\r\n\r\nconst Skeleton = (props) => {\r\n    return (\r\n            <div className=\"twit_box\" >\r\n                <div className=\"twit_box_cap\" >\r\n                    <div className=\"twit_box_cap_photo\">\r\n                        <img src={props.photo} alt=\"\"/>\r\n                    </div>\r\n                    <div className=\"twit_box_cap_name\">\r\n                        <h5>{props.name}</h5>\r\n                        <div className=\"twit_box_cap_status\">\r\n                            <span>{props.nickname} â€¢{props.date}</span>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"twit_box_cap_text\">\r\n                       <span>{props.content}</span>\r\n                    </div>\r\n                </div>\r\n                <div className=\"twit_box_container\">\r\n                    <img src={props.image} alt=\"\"/>\r\n                </div>\r\n            </div>\r\n    );\r\n}\r\n\r\nexport default Skeleton;","import React, { Component }  from 'react';\r\nimport {CreateContainer, CreateForm, CreateFormLabel, CreateFormSelect, CreateFormInput, CreateButton} from \"./createStyled.js\";\r\nimport Skeleton from '../posts/skeleton.js';\r\nimport { connect } from \"react-redux\";\r\n\r\nconst month = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\r\nconst time = new Date();\r\nconst date = time.getDate() + \" \" + month[time.getMonth()];\r\n\r\n    const mapState = (state) => {\r\n      return {\r\n        existAccount: state.existAccount,\r\n      };\r\n    };\r\n\r\n    const mapDispatch = (dispatch) => {\r\n      return {\r\n        addNewPost: (newPost) =>\r\n          dispatch({\r\n            type: \"ADD_POST\",\r\n            newPost: { ...newPost },\r\n          }),\r\n      };\r\n    };\r\n\r\nclass Create extends Component {\r\n    state = {\r\n        photos: this.props.existAccount[0].photos,\r\n        names: this.props.existAccount[0].names,\r\n        nicknames: this.props.existAccount[0].nicknames,\r\n        dates: date,\r\n        contents: \"\",\r\n        images: \"\",\r\n    };\r\n\r\n    changeText = (event) => {\r\n        this.setState({ contents: event.target.value });\r\n        };\r\n\r\n    urlImages = (event) => {\r\n        this.setState({ images: event.target.value });\r\n        };\r\n\r\n    setTwit = (event) => {\r\n        const twit = this.props.existAccount.filter(\r\n            (twit) => twit.names === event.target.value\r\n            )[0];\r\n            this.setState({\r\n                names: event.target.value,\r\n                nicknames: twit.nicknames,\r\n                photos: twit.photos,\r\n                });\r\n        };\r\n\r\n    addNewPost = (event) => {\r\n        this.props.addNewPost(this.state);\r\n            event.target.value = \"\"\r\n        this.setState({ contents: \"\", images: \"\" });\r\n        };\r\n\r\n    render() {\r\n        return (\r\n            <CreateContainer>\r\n                <CreateForm>\r\n                    <CreateFormLabel>\r\n                        Select account:\r\n                        <CreateFormSelect\r\n                        onChange={this.setTwit}\r\n                        selected={this.props.existAccount[0].name}\r\n                        >\r\n                        {this.props.existAccount.map((twit) => ( <option>{twit.names}</option> ))}\r\n                         </CreateFormSelect>\r\n                    </CreateFormLabel>\r\n                        <CreateFormLabel>\r\n                            <CreateFormInput\r\n                                type=\"text\"\r\n                                value={this.contents}\r\n                                onChange={this.changeText}\r\n                                placeholder=\"Input text\"\r\n                            >\r\n                            </CreateFormInput>\r\n                        </CreateFormLabel>\r\n                            <CreateFormLabel>\r\n                                <CreateFormInput\r\n                                    type=\"text\"\r\n                                    value={this.images}\r\n                                    onChange={this.urlImages}\r\n                                    placeholder=\"Input URL images\"\r\n                                >\r\n                                </CreateFormInput>\r\n                            </CreateFormLabel>\r\n                </CreateForm>\r\n                    <div>\r\n                        <CreateButton type=\"submit\"\r\n                            onClick={this.addNewPost}\r\n                        > ADD\r\n                        </CreateButton>\r\n                    </div>\r\n                {this.props.existAccount.map((skeleton) => {\r\n                    return (\r\n                        <Skeleton\r\n                            photo={skeleton.photos}\r\n                            name={skeleton.names}\r\n                            nickname={skeleton.nicknames}\r\n                            date={skeleton.dates}\r\n                            content={skeleton.contents}\r\n                            image={skeleton.images}\r\n                        />\r\n                    );\r\n                })}\r\n            </CreateContainer>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(mapState, mapDispatch)(Create);","//import store from \"../store\";\r\nimport anakin from '../img/anakin_img.jpg';\r\nimport rey from '../img/rey_img.jpg';\r\nimport luke from '../img/luke_img.jpg';\r\nimport leia from '../img/leia_img.jpg';\r\nimport rey_avatar from '../img/rey_avatar.jpg';\r\nimport rey_2 from '../img/rey_img_2.jpg';\r\nimport rey_3 from '../img/rey_img_3.jpg';\r\nimport palpatine from '../img/palpatine.jpg';\r\n\r\nconst initialStore = {\r\nexistAccount:   [\r\n    {\r\n        photos: anakin,\r\n        names: \"Anakin Skywalker\",\r\n        nicknames: \"@dart_vader\",\r\n        dates: \"Feb 29\",\r\n        contents: \"WTF? Who is Rey? Why she is Skywalker? Luke...?\",\r\n        images: rey,\r\n    },{\r\n        photos: luke,\r\n        names: \"Luke Skywalker\",\r\n        nicknames: \"@defeated_sith\",\r\n        dates: \"Mar 1\",\r\n        contents: \"I don't know! I taught her for 1 day. Leia...?\",\r\n        images: rey_2,\r\n    },{\r\n        photos: leia,\r\n        names: \"Leia Skywalker\",\r\n        nicknames: \"@organa\",\r\n        dates: \"Mar 2\",\r\n        contents: \"Luke? We were together near Ray on Tatooine. Didn't you hear what she said? Why didn't he say anything then?\",\r\n        images: rey_3,\r\n    },{\r\n        photos: rey_avatar,\r\n        names: \"Rey Skywalker\",\r\n        nicknames: \"@last_jedi\",\r\n        dates: \"Mar 5\",\r\n        contents: \"Won't I introduce myself to Palpatine? He's...\",\r\n        images: palpatine,\r\n    }\r\n    ]\r\n};\r\n\r\nconst reducer  = (store = initialStore, action) => {\r\n  switch (action.type) {\r\n    case \"ADD_POST\": {\r\n      return {\r\n        ...store,\r\n        existAccount: [action.newPost, ...store.existAccount]\r\n      };\r\n    }\r\n    default:\r\n      return store;\r\n  }\r\n};\r\n\r\nexport default reducer;","import {createStore} from 'redux';\r\nimport reducer from \"../reducers/reducer\";\r\n\r\nconst store = createStore(reducer);\r\n\r\nexport default store;","import React from 'react';\nimport Create from './post/create.js';\nimport {Provider} from 'react-redux';\nimport store from \"./store\";\n\nfunction App() {\n    return (\n        <Provider store = {store}>\n            <div>\n                <Create />\n            </div>\n        </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}